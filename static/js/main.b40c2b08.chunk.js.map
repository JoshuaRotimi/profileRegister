{"version":3,"sources":["photo.png","components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","href","target","rel","id","this","props","account","width","height","src","concat","Identicon","toString","Component","Main","_this","role","style","maxWidth","onSubmit","e","preventDefault","firstName","value","lastName","createProfile","console","log","action","htmlFor","type","name","ref","input","placeholder","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","loading","state","profiles","methods","send","from","then","res","catch","err","getProfile","_ref","asyncToGenerator","regenerator_default","mark","_callee4","profileDetails","wrap","_context4","prev","next","sent","stop","_x","apply","arguments","loadWeb3","loadBlockChainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Register","networks","register","Contract","abi","address","profileId","_this2","components_Navbar","components_Main","onClick","_hex","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6ujEAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gPCsCzBC,2LA/BX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kEACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,sCACVC,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAJN,oBAQAN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oDACZH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,SAAOK,GAAG,WAAWC,KAAKC,MAAMC,UAEhCF,KAAKC,MAAMC,QACTV,EAAAC,EAAAC,cAAA,OACAC,UAAU,OACVQ,MAAM,KACNC,OAAO,KACPC,IAAG,yBAAAC,OAA2B,IAAIC,IAAUP,KAAKC,MAAMC,QAAS,IAAIM,cAEpEhB,EAAAC,EAAAC,cAAA,uBAzBKe,cCoDNC,mLAnDJ,IAAAC,EAAAX,KACP,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMkB,KAAK,OAAOjB,UAAU,4BAA4BkB,MAAO,CAAEC,SAAU,UACzEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,QAAMqB,SAAU,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAYP,EAAKO,UAAUC,MAC3BC,EAAWT,EAAKS,SAASD,MAC/BR,EAAKV,MAAMoB,cAAcH,EAAWE,GACpCE,QAAQC,IAAIL,EAAWE,EAAU,kBAEhCI,OAAO,IACRhC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,sBACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAW,OAAQ8B,QAAQ,cAAlC,gBACAjC,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,OACL3B,GAAI,YACJ4B,KAAM,aACNC,IAAM,SAAAC,GAAUlB,EAAKO,UAAYW,GACjCC,YAAa,gBACbnC,UAAW,kBAGpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,sBACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAW,OAAQ8B,QAAQ,aAAlC,eACAjC,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,OACLC,KAAM,YACN5B,GAAI,WACJ6B,IAAM,SAAAC,GAAUlB,EAAKS,SAAWS,GAChCC,YAAa,eACbnC,UAAW,kBAIpBH,EAAAC,EAAAC,cAAA,UAAQC,UAAW,mBAAnB,mBAGFH,EAAAC,EAAAC,cAAA,4BAzCKe,aCqGJsB,cApCb,SAAAA,EAAY9B,GAAO,IAAAU,EAAA,OAAAqB,OAAAC,EAAA,EAAAD,CAAAhC,KAAA+B,IACjBpB,EAAAqB,OAAAE,EAAA,EAAAF,CAAAhC,KAAAgC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAApC,KAAMC,KApBRoB,cAAgB,SAACH,EAAWE,GAC1BE,QAAQC,IAAI,uBAEZZ,EAAK0B,SAAS,CAACC,SAAS,IACxB3B,EAAK4B,MAAMC,SAASC,QAAQpB,cAAcH,EAAWE,GAAUsB,KAAK,CAACC,KAAMhC,EAAK4B,MAAMrC,QAASiB,MAAO,OACjGyB,KAAK,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,EAAK,aAAYC,MAAM,SAAAC,GAAG,OAAIzB,QAAQC,IAAIwB,EAAK,WAC5EpC,EAAK0B,SAAS,CAACC,SAAS,KAaP3B,EAVnBqC,WAUmB,eAAAC,EAAAjB,OAAAkB,EAAA,EAAAlB,CAAAmB,EAAA1D,EAAA2D,KAVN,SAAAC,EAAOtD,GAAP,IAAAuD,EAAA,OAAAH,EAAA1D,EAAA8D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACX/C,EAAK0B,SAAS,CAACC,SAAS,IADbkB,EAAAE,KAAA,EAEkB/C,EAAK4B,MAAMC,SAASC,QAAQO,WAAWjD,GAAIqC,OAF7D,OAELkB,EAFKE,EAAAG,KAGXhD,EAAK0B,SAAS,CAACC,SAAS,IACxB3B,EAAK0B,SAAS,CAACiB,mBACfhC,QAAQC,IAAI+B,GALD,wBAAAE,EAAAI,SAAAP,MAUM,gBAAAQ,GAAA,OAAAZ,EAAAa,MAAA9D,KAAA+D,YAAA,GAEjBpD,EAAK4B,MAAQ,CACXrC,QAAS,GACToC,SAAS,EACTE,SAAW,KACXc,eAAgB,MAND3C,mNAxDXX,KAAKgE,kCACLhE,KAAKiE,sQAIPC,OAAOC,gCACTD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,mBACxBD,OAAOC,SAASG,sCACbJ,OAAOE,KAChBF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAEnCL,OAAOM,MAAM,sUAKTJ,EAAOF,OAAOE,cAEGA,EAAKK,IAAIC,4BAA1BC,SACN3E,KAAKqC,SAAS,CAACnC,QAAUyE,EAAS,cAEVP,EAAKK,IAAIG,IAAIC,kBAA/BC,WACAC,EAAcC,EAASC,SAASH,4BAE9BI,EAAWd,EAAKK,IAAIU,SAASH,EAASI,IAAKL,EAAYM,SAC7DrF,KAAKqC,SAAS,CAAEG,SAAU0C,cACFA,EAASzC,QAAQ6C,YAAYlD,eAA/CkD,SACNtF,KAAKqC,SAAS,CAACiD,cACfhE,QAAQC,IAAI+D,GAEZtF,KAAKqC,SAAS,CAACC,SAAS,4BAGxB4B,OAAOM,MAAM,4MAiCR,IAAAe,EAAAvF,KACP,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8F,EAAD,CAAQtF,QAASF,KAAKuC,MAAMrC,UAC5BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BkB,MAAO,CAAEC,SAAU,UAC1Dd,KAAKuC,MAAMD,SAAW9C,EAAAC,EAAAC,cAAA,OAAKK,GAAG,SAASJ,UAAU,oBAAmBH,EAAAC,EAAAC,cAAA,wBACtEF,EAAAC,EAAAC,cAAC+F,EAAD,CAAMpE,cAAerB,KAAKqB,gBAE1B7B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,2BACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAW,oBAAqB+F,QAAS,kBAAMH,EAAKvC,WAAWuC,EAAKhD,MAAMrC,WAAlF,wBAGDF,KAAKuC,MAAMe,gBACR9D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,yBAAiBM,KAAKuC,MAAMe,eAAe,IAC3C9D,EAAAC,EAAAC,cAAA,wBAAgBM,KAAKuC,MAAMe,eAAe,IAC1C9D,EAAAC,EAAAC,cAAA,iBAASM,KAAKuC,MAAMe,eAAe,GAAGqC,gBAtFpClF,aCGEmF,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzG,EAAAC,EAAAC,cAACwG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.b40c2b08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo.d6cbd8e6.png\";","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport photo from '../photo.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"http://www.dappuniversity.com/bootcamp\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Profile Register\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            { this.props.account\n              ? <img\n                className='ml-2'\n                width='30'\n                height='30'\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n              />\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\n            <div className=\"content mr-auto ml-auto\">\n              <p>&nbsp;</p>\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const firstName = this.firstName.value;\n                const lastName = this.lastName.value;\n                this.props.createProfile(firstName, lastName);\n                console.log(firstName, lastName, 'Profile Names');\n\n              }} action=\"\">\n                <div className={'form-group mr-sm-2'}>\n                  <label className={'mr-2'} htmlFor=\"First Name\" >First Name: </label>\n                  <input type=\"text\"\n                         id={'firstName'}\n                         name={'First Name'}\n                         ref={(input => {this.firstName = input})}\n                         placeholder={'First Name...'}\n                         className={'form-control'}\n                  />\n                </div>\n                <div className={'form-group mr-sm-2'}>\n                  <label className={'mr-2'} htmlFor=\"Last Name\" >Last Name: </label>\n                  <input type=\"text\"\n                         name={'Last Name'}\n                         id={'lastName'}\n                         ref={(input => {this.lastName = input})}\n                         placeholder={'Last Name...'}\n                         className={'form-control'}\n                  />\n                </div>\n\n                <button className={'btn btn-primary'}>Create Profile</button>\n\n              </form>\n              <p>&nbsp;</p>\n                \n                {/* Code ... */}\n\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.css';\nimport Register from '../abis/Register'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\n\nclass App extends Component {\n\n  async UNSAFE_componentWillMount () {\n    await this.loadWeb3();\n    await this.loadBlockChainData();\n  }\n\n  async loadWeb3 () {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable()\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    } else {\n      window.alert('No ethereum broswer detected. You can check out MetaMask!')\n    }\n  }\n\n  async loadBlockChainData () {\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({account : accounts[0]});\n\n    const networkId = await web3.eth.net.getId();\n    const networkData = Register.networks[networkId];\n    if (networkData) {\n      const register = web3.eth.Contract(Register.abi, networkData.address);\n      this.setState({ profiles: register});\n      const profileId = await register.methods.profileId().call();\n      this.setState({profileId});\n      console.log(profileId);\n\n      this.setState({loading: false});\n\n    } else {\n      window.alert('Register Contract not deployed to detected network.')\n    }\n  };\n\n  createProfile = (firstName, lastName) => {\n    console.log('Submitting Document');\n\n    this.setState({loading: true});\n    this.state.profiles.methods.createProfile(firstName, lastName).send({from: this.state.account, value: 10000000000000000})\n        .then(res => console.log(res, 'Success')).catch(err => console.log(err, 'Error'));\n    this.setState({loading: false});\n};\n\n  getProfile = async (id) => {\n    this.setState({loading: true});\n    const profileDetails = await this.state.profiles.methods.getProfile(id).call();\n    this.setState({loading: false});\n    this.setState({profileDetails});\n    console.log(profileDetails);\n\n  };\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      loading: true,\n      profiles : null,\n      profileDetails: null\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\n          { this.state.loading && <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>}\n          <Main createProfile={this.createProfile} />\n\n          <div className={'form-group mr-sm-2 my-5'}>\n            <button className={'btn btn-secondary'} onClick={() => this.getProfile(this.state.account)}>Get Profile Details</button>\n          </div>\n\n          {this.state.profileDetails &&\n              <div>\n                <h3>Profile Details</h3>\n                <h3>First Name: {this.state.profileDetails[0]}</h3>\n                <h3>Last Name: {this.state.profileDetails[1]}</h3>\n                <h3>ID: {this.state.profileDetails[2]._hex}</h3>\n             </div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}